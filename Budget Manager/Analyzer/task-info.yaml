type: edu
custom_name: stage5
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import budget.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {

        public BudgetManagerTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test1),

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test2),

                    new TestCase<String>()
                            .setInput("4\n0")
                            .setCheckFunc(BudgetManagerTest::test3),

                    new TestCase<String>()
                            .setInput("1\n400\n4\n1\n200\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test4),

                    new TestCase<String>()
                            .setInput("1\n1000\n2\n" +
                                    "1\nAlmond 250g\n35.43\n" +
                                    "1\nMilk\n3.50\n" +
                                    "1\nRed Fuji Apple\n5.99\n" +
                                    "1\nEggs\n3.99\n" +
                                    "1\nFIJI Natural Artesian Water\n25.98\n" +
                                    "1\nHershey's milk chocolate bars\n8.54\n" +
                                    "1\nGreat Value Broccoli Florets\n1.00\n" +
                                    "1\nKeystone Ground Bee\n6.28\n" +
                                    "2\nGildan LT\n8.61\n" +
                                    "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                                    "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                                    "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                                    "3\nCinema\n8.73\n" +
                                    "3\nSkate rental\n30\n" +
                                    "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                                    "4\nChick-fil-A $10 Gift Card\n10\n" +
                                    "4\nDebt\n3.50\n" +
                                    "5\n5\n0")
                            .setCheckFunc(BudgetManagerTest::test5),

                    new TestCase<String>()
                            .setInput("6\n4\n3\n5\n1\n6\n0")
                            .setCheckFunc(BudgetManagerTest::test6),

                    new TestCase<String>()
                            .setInput("7\n1\n2\n3\n4\n4\n6\n7\n1\n2\n3\n1\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test7)
            );
        }


        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                        "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                            "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 4\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                        "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                        "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 10\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                        "Balance is wrong after adding income!.\n" +
                                "Expected:\n" +
                                "Balance: $400.00\n" +
                                "Your output:\n" +
                                balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                        "Your program should create purchase.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 12\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                        "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28",
                    "Gildan LT $8.61",
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                    "Wrangler Men's Stretch Cargo Pant $19.97",
                    "LEGO DUPLO Town Farm Animals $10.10",
                    "Cinema $8.73",
                    "Skate rental $30.00",
                    "Sensodyne Pronamel Toothpaste $19.74",
                    "Chick-fil-A $10 Gift Card $10.00",
                    "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your all purchases list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of all purchases is wrong. Expected:\n" +
                                "Total sum: $214.36\n" +
                                "Your output:\n" +
                                totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                        "Your all total sum is wrong!");
            }

            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[]{
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your food list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of food list is wrong. Expected:\n" +
                                "Total sum: $90.71\n" +
                                "Your output:\n" + totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                        "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }


        //Sorting check
        private static CheckResult test7(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 22\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String sortEmptyAllPurchases = blocks[2];

            if (!sortEmptyAllPurchases.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort all purchases\" item shouldn't work if there are no purchases in the list.\n" +
                                "You should print 'List is empty!'");
            }

            String sortByEmptyType = blocks[4];

            if (sortByEmptyType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort by type\" item should work even if there are no purchases in the list\n" +
                                "You should print each category with total sum $0\n" +
                                "Your output shouldn't contain 'List is empty!'");
            }

            String sortEmptyCertainType = blocks[7];

            if (!sortEmptyCertainType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort certain type\" item shouldn't work if there are no purchases in the certain list\n" +
                                "You should print 'List is empty'");
            }

            String allSorted = blocks[13];
            String rightSorted = "Almond 250g $35.43\n" +
                    "Skate rental $30.00\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Wrangler Men's Stretch Cargo Pant $19.97\n" +
                    "Sensodyne Pronamel Toothpaste $19.74\n" +
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                    "LEGO DUPLO Town Farm Animals $10.10\n" +
                    "Chick-fil-A $10 Gift Card $10.00\n" +
                    "Cinema $8.73\n" +
                    "Gildan LT $8.61\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Debt $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!allSorted.contains(rightSorted)) {
                return new CheckResult(false,
                        "Your program sort all purchases wrong!\n" +
                                "Expected:\n" +
                                rightSorted + "\n" +
                                "Your output:\n" +
                                allSorted);
            }


            String sortedByType = blocks[15];
            String rightSortedByType = "Food - $90.71\n" +
                    "Entertainment - $48.83\n" +
                    "Clothes - $41.58\n" +
                    "Other - $33.24";

            if (!sortedByType.contains(rightSortedByType)) {
                return new CheckResult(false,
                        "Your program sort by type wrong!\n" +
                                "Expected:\n" +
                                rightSortedByType + "\n" +
                                "Your output:\n" +
                                sortedByType);
            }

            String sortedCertainType = blocks[18];
            String rightSortedCertainType = "Almond 250g $35.43\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!sortedCertainType.contains(rightSortedCertainType)) {
                return new CheckResult(false,
                        "Your program sort certain type wrong!\n" +
                                "Expected:\n" +
                                rightSortedCertainType + "\n" +
                                "Your output:\n" +
                                sortedCertainType);
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/FileProcessor.java
  visible: true
  text: |
    package budget;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.text.NumberFormat;
    import java.text.ParseException;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Locale;
    import java.util.Scanner;

    public class FileProcessor {
        File file = new File("purchases.txt");

        public FileProcessor() {
            super();
            try {
                this.file.createNewFile();
            } catch (IOException e) {
                System.out.println("Cannot create the file: " + this.file.getPath());
            }
        }

        public File getFile() {
            return file;
        }
        public void save(Budget budget) {
            Double balance = budget.getBalance();
            NumberFormat nf = NumberFormat.getInstance(new Locale("en", "US"));
            nf.setMaximumFractionDigits(2);
            nf.setMinimumFractionDigits(2);

            List<Purchase> purchaseList = budget.getPurchaseList();
            try (PrintWriter printWriter = new PrintWriter(file)) {

                printWriter.printf("Balance:%s\n", nf.format(balance));
                for (Purchase p : purchaseList){
                    printWriter.printf("%s|%s|%s\n", p.getName(), nf.format(p.getPrice()),p.getCategory());
                }
            } catch (IOException e) {
                System.out.printf("An exception occurs %s", e.getMessage());
            }

            System.out.println("\nPurchases were saved!\n");
        }

        public void load(Budget budget) {
            try (Scanner scanner = new Scanner(file)) {
                String balance = scanner.nextLine();
                NumberFormat nf = NumberFormat.getInstance(new Locale("en", "US"));
                nf.setMinimumFractionDigits(2);
                nf.setMaximumFractionDigits(2);

                if (balance.contains("Balance")) {
                   // System.out.println("Balance : "+balance.split(":")[1]);

                    budget.setBalance(nf.parse(balance.split(":")[1]).doubleValue());
                }
                while (scanner.hasNext()) {
                    String line = scanner.nextLine();
                    String[] arr = line.split("\\|");
                    String name = arr[0];
                    //System.out.println(line+ " price: "+ Arrays.toString(arr));
                    double price = nf.parse(arr[1]).doubleValue();
                    String type = arr[2];

                    budget.addPurchace(new Purchase(price,name,type));
                }
            } catch (FileNotFoundException | ParseException e) {
                System.out.println("No file found: " + this.file);
                System.out.println("No file found: " + e.getMessage());
            }

            System.out.println("\nPurchases were loaded!\n");
        }
    }
  learner_created: true
- name: purchases.txt
  visible: true
  text: |
    Balance:785.64
    Almond 250g|35.43|Food
    Milk|3.50|Food
    Red Fuji Apple|5.99|Food
    Eggs|3.99|Food
    FIJI Natural Artesian Water|25.98|Food
    Hershey's milk chocolate bars|8.54|Food
    Great Value Broccoli Florets|1.00|Food
    Keystone Ground Bee|6.28|Food
    Gildan LT|8.61|Clothes
    Men's Dual Defense Crew Socks 12 Pairs|13.00|Clothes
    Wrangler Men's Stretch Cargo Pant|19.97|Clothes
    LEGO DUPLO Town Farm Animals|10.10|Entertainment
    Cinema|8.73|Entertainment
    Skate rental|30.00|Entertainment
    Sensodyne Pronamel Toothpaste|19.74|Other
    Chick-fil-A $10 Gift Card|10.00|Other
    Debt|3.50|Other
  learner_created: true
- name: src/budget/Budget.java
  visible: true
  text: |
    package budget;

    import java.util.ArrayList;
    import java.util.List;

    public class Budget {
        private List<Purchase> purchaseList;
        private double balance; //income

        public Budget(List<Purchase> list) {
            this.purchaseList = list;
        }

        public Budget() {
            purchaseList = new ArrayList<>();
        }

        public void addIncome(double amount) {
            this.balance += amount;
        }

        public void setBalance(double balance) {
            this.balance = balance;
        }

        public double getBalance() {
            return balance;
        }

        public void addPurchace(Purchase add) {
            this.purchaseList.add(add);
        }

        public void addPurchace(String name, double price) {
            this.purchaseList.add(new Purchase(price, name));
        }

        public List<Purchase> getPurchaseList() {
            return purchaseList;
        }

        public List<Purchase> getPurchaseList(int type) {
            List<Purchase> newList= new ArrayList<>();

            for (Purchase e : purchaseList) {
                //this category is present
                if (e.getCategory().equals(Purchase.getCategory(type))) {
                    newList.add(e);//add
                }
            }
            return newList;
        }

    }
  learner_created: true
- name: src/budget/Purchase.java
  visible: true
  text: |
    package budget;

    import java.util.Objects;

    public class Purchase {
        private double price;
        private String name;
        private String category;

        public Purchase(double price, String name) {
            this.price = price;
            this.name = name;
        }
        public Purchase(double price, String name, String category) {
            this.price = price;
            this.name = name;
            this.category =category;
        }
        public Purchase(double price, String name, int type) {
            this.price = price;
            this.name = name;
            this.category =setCategory(type);
        }
        public Purchase() {
        }
        public String setCategory(int type){
            switch(type){
                case 1:
                    this.category = "Food";
                    break;
                case 2:
                    this.category = "Clothes";
                    break;
                case 3:
                    this.category = "Entertainment";
                    break;
                case 4:
                this.category = "Other";
                break;
                default:
                    this.category = "Other";

            }
            return category;
        }
        public static String getCategory(int type){
            String cat;
            switch(type){
                case 1:
                    cat = "Food";
                    break;
                case 2:
                    cat = "Clothes";
                    break;
                case 3:
                    cat = "Entertainment";
                    break;
                case 4:
                    cat = "Other";
                    break;
                default:
                    cat = "Other";

            }
            return cat;
        }
        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getCategory() {
            return category;
        }

        public void setCategory(String category) {
            this.category = category;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Purchase)) return false;
            Purchase purchase = (Purchase) o;
            return Double.compare(purchase.getPrice(), getPrice()) == 0 &&
                    Objects.equals(getName(), purchase.getName()) &&
                    Objects.equals(getCategory(), purchase.getCategory());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getPrice(), getName(), getCategory());
        }

        @Override
        public String toString() {
            return "Purchase{" +
                    "price=" + price +
                    ", name='" + name + '\'' +
                    ", category='" + category + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/budget/PurchaseTypeSort.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/76/stages/425/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/76/stages/425/implement">JetBrains
    Academy</a>
  time: Sat, 28 Nov 2020 19:06:31 UTC
record: 5
